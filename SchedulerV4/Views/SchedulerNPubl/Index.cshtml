@model List<SchedulerV4.Models.ScheduleNPublEntity>

@{
    ViewData["Title"] = "Расписание";
    var groupList = ViewBag.GroupList as List<SelectListItem>;
    int? filteredGroupNo = ViewBag.FilteredGroupNo as int?;
}

<style>
    .add-btn {
        display: inline-block;
        padding: 10px 25px;
        font-size: 17px;
        background-color: #28a745;
        color: white;
        border-radius: 6px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .add-btn:hover {
            background-color: #218838;
        }

    .form-row {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 20px;
        background: #fff;
        padding: 30px 40px;
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.1);
        width: 100%; /* растянуть на всю ширину */
        max-width: none; /* убрать ограничение */
        margin: 0 auto 40px;
    }

    label {
        font-size: 15px;
        color: #555;
        width: auto;
    }

    select {
        width: 350px;
        height: 50px;
        font-size: 15px;
        padding: 0 15px;
        border: 2px solid #ddd;
        border-radius: 8px;
        transition: border-color 0.3s ease;
        background-color: white;
        appearance: none;
        -webkit-appearance: none;
        -moz-appearance: none;
        background-image: url("data:image/svg+xml;charset=UTF-8,%3Csvg width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 15px center;
        background-size: 20px 20px;
    }

        select:focus {
            border-color: #0088CE;
            outline: none;
            box-shadow: 0 0 8px rgba(0, 136, 206, 0.3);
        }

    button {
        font-size: 15px;
        height: 48px;
        background: #0088CE;
        color: white;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        width: auto;
        text-align: center;
        padding: 5px 10px;
    }

        button:hover {
            background: #006fa1;
        }

    table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    th {
        background-color: #0088CE;
        color: white;
    }

    body {
        color: #333;
    }

    h1 {
        font-size: 40px;
        text-align: center;
        margin-bottom: 30px;
    }

    h2 {
        font-size: 30px;
        text-align: center;
        margin-bottom: 30px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        background: white;
        box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    th, td {
        border: 1px solid #ddd;
        padding: 8px 10px;
        text-align: center;
        font-size: 15px;
    }

    th {
        background-color: #0088CE;
        color: white;
    }

    button {
        padding: 5px 10px;
        background-color: #0088CE;
        border: none;
        color: white;
        border-radius: 4px;
        cursor: pointer;
    }

        button:hover {
            background-color: #006fa1;
        }
    /* Модальное окно */
    .modal {
        display: none; /* скрыто по умолчанию */
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        background: white;
        padding: 25px 30px;
        border-radius: 10px;
        width: 500px;
        max-width: 90%;
        box-shadow: 0 8px 30px rgba(0,0,0,0.3);
    }

    .modal-header {
        font-size: 28px;
        margin-bottom: 20px;
        font-weight: bold;
        text-align: center;
    }

    .modal-row {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 15px;
        margin-bottom: 15px;
    }

        .modal-row label {
            width: 200px; /* одинаковая ширина у всех меток */
            font-size: 18px;
        }

        .modal-row select,
        .modal-row input[type="text"],
        .modal-row input[type="date"],
        .modal-row input[type="time"] {
            flex-grow: 1;
            font-size: 18px;
            padding: 6px 10px;
            border: 1.5px solid #ccc;
            border-radius: 6px;
            width: 120%; /* чтобы занимал доступное пространство */
            box-sizing: border-box;
        }

    .modal-footer {
        margin-top: 25px;
        text-align: center;
    }

        .modal-footer button {
            margin: 0 10px;
            padding: 10px 25px;
            font-size: 18px;
        }
        .label-display {
        font-weight: bold;
        margin-left: 10px;
        margin-right: 10px;
        display: inline-block;
        min-width: 30px;
        color: #333;
    }
</style>

<h1>Расписание занятий</h1>

@*                                     Ф И Л Ь Т Р Ы *@

<div class="form-row">
    <label for="groupSelect">Номер группы:</label>
    <select id="groupSelect" name="groupId">
        <option value="">-- Все группы --</option>
        @foreach (var group in groupList)
        {
                @if (ViewBag.SelectedGroupId?.ToString() == group.Value)
                {
                    <option value="@group.Value" selected>@group.Text</option>
                }
                else
                {
                    <option value="@group.Value">@group.Text</option>
                }
        }
    </select>
    <label for="tipSelect">Тип занятия:</label>
    <select id="tipSelect" name="tip">
        <option value="">-- Выберите тип --</option>
        @if (ViewBag.SelectedTip?.ToString() == "1")
        {
            <option value="1" selected>дневное</option>
        }
        else
        {
            <option value="1">дневное</option>
        }
        @if (ViewBag.SelectedTip?.ToString() == "2")
        {
            <option value="2" selected>экзамен</option>
        }
        else
        {
            <option value="2">экзамен</option>
        }
        @if (ViewBag.SelectedTip?.ToString() == "3")
        {
            <option value="3" selected>заочное</option>
        }
        else
        {
            <option value="3">заочное</option>
        }
    </select>

    <label for="yearSelect">Год:</label>
    <select id="yearSelect" name="year">
        <option value="">-- Выберите год --</option>
        @{
            int currentYear = DateTime.Now.Year;
            for (int y = currentYear - 1; y <= currentYear + 1; y++)
            {
                if (ViewBag.SelectedYear?.ToString() == y.ToString())
                {
                    <option value="@y" selected>@y</option>
                }
                else
                {
                    <option value="@y">@y</option>
                }
            }
        }
    </select>

    <label for="semesterSelect">Семестр:</label>
    <select id="semesterSelect" name="semester">
        <option value="">-- Выберите семестр --</option>
        @if (ViewBag.SelectedSemester?.ToString() == "1")
        {
            <option value="1" selected>осенний</option>
        }
        else
        {
            <option value="1">осенний</option>
        }
        @if (ViewBag.SelectedSemester?.ToString() == "2")
        {
            <option value="2" selected>весенний</option>
        }
        else
        {
            <option value="2">весенний</option>
        }
    </select>
</div>
<input type="hidden" id="groupSelect1" name="groupId1" />
<input type="hidden" id="tipSelect1" name="tip1" />
<input type="hidden" id="yearSelect1" name="year1" />
<input type="hidden" id="semesterSelect1" name="semester1" />
<script>
    function syncHiddenFilters() {
        document.getElementById('groupSelect1').value = document.getElementById('groupSelect').value;
        document.getElementById('tipSelect1').value = document.getElementById('tipSelect').value;
        document.getElementById('yearSelect1').value = document.getElementById('yearSelect').value;
        document.getElementById('semesterSelect1').value = document.getElementById('semesterSelect').value;
    }
    // И вызвать сразу для начальной установки
    syncHiddenFilters();
</script>
@if (ViewBag.ShowAddButton == true)
{
    <button type="button" id="openCreateModalBtn">Добавить занятие</button>
}

@*                                    Д О Б А В Л Е Н И Е   О К Н О *@

<div class="modal" id="createModal">
    <div class="modal-content">
        <div class="modal-header">Добавление занятия группе номер 
            @if (filteredGroupNo.HasValue)
            {
                <text>@filteredGroupNo</text>
            }
        </div>
        <form id="transferForm">
            <input type="hidden" id="createGroupNo" name="GROUPNO" value="@ViewBag.FilteredGroupNo" />
            <div class="modal-row">
                <label style="width:200px" for="createDay">День</label>
                <select name="DEN" required>
                    <option value="">Выберите день</option>
                    <option value="пн">пн</option>
                    <option value="вт">вт</option>
                    <option value="ср">ср</option>
                    <option value="чт">чт</option>
                    <option value="пт">пт</option>
                    <option value="сб">сб</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="paritySelect">Четность / Дата</label>
                <select id="paritySelect" name="DATA" required>
                    <option value="чет/неч">чет/неч</option>
                    <option value="чет">чет</option>
                    <option value="неч">неч</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createTime">Время</label>
                <select name="VREM" required>
                    <option value="">Выберите время</option>
                    <option value="08:00">08:00</option>
                    <option value="09:40">09:40</option>
                    <option value="11:20">11:20</option>
                    <option value="13:30">13:30</option>
                    <option value="15:10">15:10</option>
                    <option value="16:50">16:50</option>
                    <option value="18:25">18:25</option>
                    <option value="20:00">20:00</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createDiscipline">Дисциплина</label>
                <select name="DISCIPL_NUM" required>
                    <option value="">Выберите дисциплину</option>
                    @foreach (var item in ViewBag.Disciplins as List<SelectListItem>)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createFormZan">Вид занятия</label>
                <select name="FORM_ZAN" required>
                    <option value="">Выберите вид занятия</option>
                    <option value="лек">лек</option>
                    <option value="пр">пр</option>
                    <option value="л.р.">л.р.</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createBuilding">Здание</label>
                <select id="createBuilding" name="ZDANIE" required>
                    <option value="">Выберите здание</option>
                    @foreach (var item in ViewBag.Buildings as List<SelectListItem>)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createAud">Аудитория</label>
                <select id="createAud" name="AUDITORIYA" disabled required>
                    <option value="">Выберите аудиторию</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createTeacher">Преподаватель</label>
                <select id="createTeacher" name="PREPODAVATEL" required>
                    <option value="">Выберите преподавателя</option>
                    @foreach (var t in ViewBag.Prepodavatels as List<SelectListItem>)
                    {
                        <option value="@t.Value">@t.Text</option>
                    }
                </select>
            </div>
            <input type="hidden" id="hiddenTip" name="TIP" />
            <input type="hidden" id="hiddenSemester" name="SEMESTR" />
            <input type="hidden" id="hiddenYear" name="YEARF" />
            <div class="modal-footer">
                <button type="submit">Добавить</button>
                <button type="button" id="cancelCreateBtn">Отмена</button>
            </div>
        </form>
    </div>
</div>

@*                                   Открытие/закрытие модального окна *@

<script>
    const createModal = document.getElementById('createModal');
    const openCreateModalBtn = document.getElementById('openCreateModalBtn');
    const cancelCreateBtn = document.getElementById('cancelCreateBtn');
    const createForm = document.getElementById('transferForm');

    openCreateModalBtn.addEventListener('click', () => {
        const groupId = document.getElementById('groupSelect').value;
        const tip = document.getElementById('tipSelect').value;
        const semester = document.getElementById('semesterSelect').value;
        const year = document.getElementById('yearSelect').value;

        if (!groupId || !tip || !semester || !year) {
            alert("Пожалуйста, выберите все фильтры: группу, тип занятия, год и семестр перед добавлением.");
            return;
        }

        document.getElementById('hiddenTip').value = tip;
        document.getElementById('hiddenSemester').value = semester;
        document.getElementById('hiddenYear').value = year;

        createModal.style.display = 'flex';
    });

    cancelCreateBtn.addEventListener('click', () => {
        createModal.style.display = 'none';
        createForm.reset();
    });

    window.addEventListener('click', (e) => {
        if (e.target === createModal) {
            createModal.style.display = 'none';
            createForm.reset();
        }
    });
</script>

@*                                    Добавление строки *@

<script>
    // Сабмит формы
        document.getElementById('transferForm').addEventListener('submit', async function (e) {
        e.preventDefault();

        const parity = document.getElementById('paritySelect').value;
        if (!parity) {
            alert("Пожалуйста, выберите четность.");
            return;
        }

        const form = e.target;
        const formData = new FormData();
        formData.append("GROUPNO", document.getElementById("createGroupNo").value);
        formData.append("DEN", form.DEN.value);
        formData.append("VREM", form.VREM.value);
        formData.append("DATA", parity); // <-- просто чётность
        formData.append("DISCIPL_NUM", form.DISCIPL_NUM.value);
        formData.append("FORM_ZAN", form.FORM_ZAN.value);
        formData.append("ZDANIE", form.ZDANIE.value);
        formData.append("AUDITORIYA", form.AUDITORIYA.value);
        formData.append("PREPODAVATEL", form.PREPODAVATEL.value);
        formData.append("TIP", document.getElementById("hiddenTip").value);
        formData.append("SEMESTR", document.getElementById("hiddenSemester").value);
        formData.append("YEARF", document.getElementById("hiddenYear").value);

        const response = await fetch('/SchedulerNPubl/Create', {
            method: 'POST',
            body: formData
        });

        if (response.ok) {
            alert("Занятие успешно добавлено!");
            document.getElementById('createModal').style.display = 'none';
            form.reset();
            updateSchedule();
        } else {
            const errorText = await response.text();
            alert("Ошибка: " + errorText);
        }
    });
</script>

@*                                    Для обновления вывода расписания *@

<script>
    function updateSchedule() {
        const groupId = document.getElementById('groupSelect').value;
        const tip = document.getElementById('tipSelect').value;
        const semester = document.getElementById('semesterSelect').value;
        const year = document.getElementById('yearSelect').value;

        const params = new URLSearchParams();

        if (groupId) params.append('groupId', groupId);
        if (tip) params.append('tip', tip);
        if (semester) params.append('semester', semester);
        if (year) params.append('year', year);

        const query = params.toString();
        window.location.href = `/SchedulerNPubl/Index${query ? '?' + query : ''}`;
    }

    // Назначение обработчиков на все селекты
    document.getElementById('groupSelect').addEventListener('change', updateSchedule);
    document.getElementById('tipSelect').addEventListener('change', updateSchedule);
    document.getElementById('semesterSelect').addEventListener('change', updateSchedule);
    document.getElementById('yearSelect').addEventListener('change', updateSchedule);
</script>

@*                                    Занятость аудиторий *@

<script>
    document.getElementById('createBuilding').addEventListener('change', async function () {
        await loadAuditoriesWithoutBusy(); // Загружаем аудитории без занятости
        await updateAuditoriesBusyStatus(); // Обновляем занятость при наличии всех данных
    });

    async function loadAuditoriesWithoutBusy() {
        const building = document.getElementById('createBuilding').value;
        const audSelect = document.getElementById('createAud');

        audSelect.innerHTML = '<option value="">Выберите аудиторию</option>';
        audSelect.disabled = true;

        if (!building) return;

        try {
            const response = await fetch(`/SchedulerNPubl/GetAuditoriesByBuilding?buildingName=${encodeURIComponent(building)}`);
            const data = await response.json();

            data.forEach(a => {
                const option = document.createElement('option');
                option.value = a.value;
                option.textContent = a.text;
                option.dataset.valueLower = a.value.toLowerCase(); // сохраняем для обновления занятости
                audSelect.appendChild(option);
            });

            audSelect.disabled = false;
        } catch (error) {
            console.error('Ошибка загрузки аудиторий:', error);
        }
    }

    async function updateAuditoriesBusyStatus() {
        const building = document.getElementById('createBuilding').value;
        const day = document.querySelector("select[name='DEN']").value;
        const time = document.querySelector("select[name='VREM']").value;
        const semester = document.getElementById('semesterSelect').value;
        const year = document.getElementById('yearSelect').value;
        const parity = document.getElementById('paritySelect').value;
        const audSelect = document.getElementById('createAud');
        const teacherSelect = document.getElementById('createTeacher');

        if (!building || !day || !time || !semester || !year || !parity) return;

        try {
            const response = await fetch(`/SchedulerNPubl/GetAuditoriesByBuilding?` +
                `buildingName=${encodeURIComponent(building)}` +
                `&day=${encodeURIComponent(day)}` +
                `&time=${encodeURIComponent(time)}` +
                `&semester=${semester}` +
                `&year=${year}` +
                `&parity=${encodeURIComponent(parity)}`);

            const data = await response.json();
            const options = audSelect.options;

            for (let i = 0; i < options.length; i++) {
                const opt = options[i];
                if (!opt.value) continue;

                const updated = data.find(d => d.value === opt.value);
                if (updated?.busy) {
                    opt.textContent = updated.text;
                    opt.title = updated.tooltip || '';
                    opt.style.color = 'red';
                    opt.disabled = true;
                } else {
                    opt.textContent = updated?.text || opt.value;
                    opt.title = '';
                    opt.style.color = '';
                    opt.disabled = false;
                }
            }
        } catch (error) {
            console.error('Ошибка обновления занятости:', error);
        }
    }

    // Обновление занятости при изменении других полей
    const updateTriggers = ['DEN', 'VREM', 'semesterSelect', 'yearSelect', 'paritySelect'];
    updateTriggers.forEach(id => {
        document.getElementById(id)?.addEventListener('change', updateAuditoriesBusyStatus);
        document.querySelector(`select[name='${id}']`)?.addEventListener('change', updateAuditoriesBusyStatus);
    });
</script>

<script>
    function validateRequiredFieldsForBuilding() {
        const day = document.querySelector("select[name='DEN']").value;
        const time = document.querySelector("select[name='VREM']").value;
        const parity = document.getElementById('paritySelect').value;
        const buildingSelect = document.getElementById('createBuilding');
        const audSelect = document.getElementById('createAud');

        if (!day || !time || !parity) {
            buildingSelect.value = "";
            buildingSelect.disabled = true;

            audSelect.innerHTML = '<option value="">Выберите аудиторию</option>';
            audSelect.disabled = true;
        } else {
            buildingSelect.disabled = false;
        }
    }
</script>

<script>
    function resetTeachersIfFieldsEmpty() {
        const day = document.querySelector("select[name='DEN']").value;
        const time = document.querySelector("select[name='VREM']").value;
        const parity = document.getElementById('paritySelect').value;
        const teacherSelect = document.getElementById('createTeacher');

        if (!day || !time || !parity) {
            teacherSelect.innerHTML = '<option value="">Выберите преподавателя</option>';
            teacherSelect.disabled = true;
        }
    }
</script>

<script>
    const teacherDeps = ["DEN", "VREM", "paritySelect", "semesterSelect", "yearSelect"];
    teacherDeps.forEach(id => {
        document.getElementById(id)?.addEventListener('change', () => {
            resetTeachersIfFieldsEmpty();
            updateTeachersBusyStatus(); // обновляем только при этих изменениях
        });
        document.querySelector(`select[name='${id}']`)?.addEventListener('change', () => {
            resetTeachersIfFieldsEmpty();
            updateTeachersBusyStatus();
        });
    });

    document.getElementById('openCreateModalBtn').addEventListener('click', () => {
        setTimeout(() => {
            resetTeachersIfFieldsEmpty();
            updateTeachersBusyStatus();
        }, 100);
    });
</script>

<script>
    async function updateFreeTimes() {
        const day = document.querySelector("select[name='DEN']").value;
        const parity = document.getElementById("paritySelect").value;
        const semester = document.getElementById("semesterSelect").value;
        const year = document.getElementById("yearSelect").value;
        const groupNo = document.getElementById("createGroupNo").value;
        const timeSelect = document.querySelector("select[name='VREM']");

        if (!day || !parity || !semester || !year || !groupNo) return;

        try {
            const response = await fetch(`/SchedulerNPubl/GetFreeTimes?` +
                `day=${encodeURIComponent(day)}` +
                `&parity=${encodeURIComponent(parity)}` +
                `&semester=${semester}` +
                `&year=${year}` +
                `&groupNo=${groupNo}`);
            const freeTimes = await response.json();

            timeSelect.innerHTML = '<option value="">Выберите время</option>';
            freeTimes.forEach(time => {
                const option = document.createElement("option");
                option.value = time;
                option.textContent = time;
                timeSelect.appendChild(option);
            });

            timeSelect.disabled = freeTimes.length === 0;
        } catch (err) {
            console.error("Ошибка при загрузке времени:", err);
        }
    }

    const timeDeps = ["DEN", "paritySelect", "semesterSelect", "yearSelect"];
    timeDeps.forEach(id => {
        document.getElementById(id)?.addEventListener("change", updateFreeTimes);
        document.querySelector(`select[name='${id}']`)?.addEventListener("change", updateFreeTimes);
    });

    // при открытии модального окна — тоже обновить
    document.getElementById('openCreateModalBtn').addEventListener('click', () => {
        setTimeout(updateFreeTimes, 100);
    });
</script>

<script>
    async function updateTeachersBusyStatus() {
        const day = document.querySelector("select[name='DEN']").value;
        const time = document.querySelector("select[name='VREM']").value;
        const semester = document.getElementById('semesterSelect').value;
        const year = document.getElementById('yearSelect').value;
        const parity = document.getElementById('paritySelect').value;
        const teacherSelect = document.getElementById('createTeacher');

        if (!day || !time || !semester || !year || !parity) return;

        try {
            const response = await fetch(`/SchedulerNPubl/GetBusyTeachers?` +
                `day=${encodeURIComponent(day)}` +
                `&time=${encodeURIComponent(time)}` +
                `&semester=${semester}` +
                `&year=${year}` +
                `&parity=${encodeURIComponent(parity)}`);
            const data = await response.json();

            teacherSelect.innerHTML = '<option value="">Выберите преподавателя</option>';

            data.forEach(t => {
                const option = document.createElement('option');
                option.value = t.value;
                option.textContent = t.text;
                option.title = t.tooltip || "";
                if (t.busy) {
                    option.style.color = 'red';
                    option.disabled = true;
                }
                teacherSelect.appendChild(option);
            });

            teacherSelect.disabled = false;
        } catch (error) {
            console.error('Ошибка загрузки преподавателей:', error);
        }
    }
</script>

<script>
    const buildingDeps = ["DEN", "VREM", "paritySelect"];
    buildingDeps.forEach(id => {
        document.getElementById(id)?.addEventListener('change', validateRequiredFieldsForBuilding);
        document.querySelector(`select[name='${id}']`)?.addEventListener('change', validateRequiredFieldsForBuilding);
    });

    // Вызов при открытии модального окна
    document.getElementById('openCreateModalBtn').addEventListener('click', () => {
        setTimeout(validateRequiredFieldsForBuilding, 100); // немного подождем появления модалки
    });
</script>


@*                                     Даты *@

<script>
    let paritySelect = document.getElementById("paritySelect");
    let daySelect = document.querySelector("select[name='DEN']");
    let semesterSelect = document.getElementById("semesterSelect");
    let yearSelect = document.getElementById("yearSelect");

        const dateOptionsByKey = {
            // весенний 2024
    "пн_весенний_2024_чет":   ["05.02", "04.03", "01.04", "06.05"],
    "пн_весенний_2024_нечет": ["12.02", "11.03", "08.04", "13.05"],

    "вт_весенний_2024_чет":   ["06.02", "05.03", "02.04", "07.05"],
    "вт_весенний_2024_нечет": ["13.02", "12.03", "09.04", "14.05"],

    "ср_весенний_2024_чет":   ["07.02", "06.03", "03.04", "08.05"],
    "ср_весенний_2024_нечет": ["14.02", "13.03", "10.04", "15.05"],

    "чт_весенний_2024_чет":   ["08.02", "07.03", "04.04", "09.05"],
    "чт_весенний_2024_нечет": ["15.02", "14.03", "11.04", "16.05"],

    "пт_весенний_2024_чет":   ["09.02", "08.03", "05.04", "10.05"],
    "пт_весенний_2024_нечет": ["16.02", "15.03", "12.04", "17.05"],

    "сб_весенний_2024_чет":   ["03.02", "02.03", "06.04", "04.05"],
    "сб_весенний_2024_нечет": ["10.02", "09.03", "13.04", "11.05"],

    // весенний 2025
    "пн_весенний_2025_чет":   ["03.02", "03.03", "07.04", "05.05"],
    "пн_весенний_2025_нечет": ["10.02", "10.03", "14.04", "12.05"],

    "вт_весенний_2025_чет":   ["04.02", "04.03", "08.04", "06.05"],
    "вт_весенний_2025_нечет": ["11.02", "11.03", "15.04", "13.05"],

    "ср_весенний_2025_чет":   ["05.02", "05.03", "09.04", "07.05"],
    "ср_весенний_2025_нечет": ["12.02", "12.03", "16.04", "14.05"],

    "чт_весенний_2025_чет":   ["06.02", "06.03", "10.04", "08.05"],
    "чт_весенний_2025_нечет": ["13.02", "13.03", "17.04", "15.05"],

    "пт_весенний_2025_чет":   ["07.02", "07.03", "11.04", "09.05"],
    "пт_весенний_2025_нечет": ["14.02", "14.03", "18.04", "16.05"],

    "сб_весенний_2025_чет":   ["08.02", "08.03", "12.04", "10.05"],
    "сб_весенний_2025_нечет": ["15.02", "15.03", "19.04", "17.05"],

    // весенний 2026
    "пн_весенний_2026_чет":   ["02.02", "02.03", "06.04", "04.05"],
    "пн_весенний_2026_нечет": ["09.02", "09.03", "13.04", "11.05"],

    "вт_весенний_2026_чет":   ["03.02", "03.03", "07.04", "05.05"],
    "вт_весенний_2026_нечет": ["10.02", "10.03", "14.04", "12.05"],

    "ср_весенний_2026_чет":   ["04.02", "04.03", "08.04", "06.05"],
    "ср_весенний_2026_нечет": ["11.02", "11.03", "15.04", "13.05"],

    "чт_весенний_2026_чет":   ["05.02", "05.03", "09.04", "07.05"],
    "чт_весенний_2026_нечет": ["12.02", "12.03", "16.04", "14.05"],

    "пт_весенний_2026_чет":   ["06.02", "06.03", "10.04", "08.05"],
    "пт_весенний_2026_нечет": ["13.02", "13.03", "17.04", "15.05"],

    "сб_весенний_2026_чет":   ["07.02", "07.03", "11.04", "09.05"],
    "сб_весенний_2026_нечет": ["14.02", "14.03", "18.04", "16.05"],

    // осенний 2024
    "пн_осенний_2024_чет":   ["02.09", "07.10", "04.11", "02.12"],
    "пн_осенний_2024_нечет": ["09.09", "14.10", "11.11", "09.12"],

    "вт_осенний_2024_чет":   ["03.09", "08.10", "05.11", "03.12"],
    "вт_осенний_2024_нечет": ["10.09", "15.10", "12.11", "10.12"],

    "ср_осенний_2024_чет":   ["04.09", "09.10", "06.11", "04.12"],
    "ср_осенний_2024_нечет": ["11.09", "16.10", "13.11", "11.12"],

    "чт_осенний_2024_чет":   ["05.09", "10.10", "07.11", "05.12"],
    "чт_осенний_2024_нечет": ["12.09", "17.10", "14.11", "12.12"],

    "пт_осенний_2024_чет":   ["06.09", "11.10", "08.11", "06.12"],
    "пт_осенний_2024_нечет": ["13.09", "18.10", "15.11", "13.12"],

    "сб_осенний_2024_чет":   ["07.09", "12.10", "09.11", "07.12"],
    "сб_осенний_2024_нечет": ["14.09", "19.10", "16.11", "14.12"],

    // осенний 2025
    "пн_осенний_2025_чет":   ["08.09", "06.10", "03.11", "01.12"],
    "пн_осенний_2025_нечет": ["01.09", "13.10", "10.11", "08.12"],

    "вт_осенний_2025_чет":   ["02.09", "07.10", "04.11", "02.12"],
    "вт_осенний_2025_нечет": ["09.09", "14.10", "11.11", "09.12"],

    "ср_осенний_2025_чет":   ["03.09", "08.10", "05.11", "03.12"],
    "ср_осенний_2025_нечет": ["10.09", "15.10", "12.11", "10.12"],

    "чт_осенний_2025_чет":   ["04.09", "09.10", "06.11", "04.12"],
    "чт_осенний_2025_нечет": ["11.09", "16.10", "13.11", "11.12"],

    "пт_осенний_2025_чет":   ["05.09", "10.10", "07.11", "05.12"],
    "пт_осенний_2025_нечет": ["12.09", "17.10", "14.11", "12.12"],

    "сб_осенний_2025_чет":   ["06.09", "11.10", "08.11", "06.12"],
    "сб_осенний_2025_нечет": ["13.09", "18.10", "15.11", "13.12"],

    // осенний 2026
    "пн_осенний_2026_чет":   ["07.09", "05.10", "02.11", "07.12"],
    "пн_осенний_2026_нечет": ["14.09", "12.10", "09.11", "14.12"],

    "вт_осенний_2026_чет":   ["08.09", "06.10", "03.11", "08.12"],
    "вт_осенний_2026_нечет": ["01.09", "13.10", "10.11", "15.12"],

    "ср_осенний_2026_чет":   ["02.09", "07.10", "04.11", "09.12"],
    "ср_осенний_2026_нечет": ["09.09", "14.10", "11.11", "16.12"],

    "чт_осенний_2026_чет":   ["03.09", "08.10", "05.11", "10.12"],
    "чт_осенний_2026_нечет": ["10.09", "15.10", "12.11", "17.12"],

    "пт_осенний_2026_чет":   ["04.09", "09.10", "06.11", "11.12"],
    "пт_осенний_2026_нечет": ["11.09", "16.10", "13.11", "18.12"],

    "сб_осенний_2026_чет":   ["05.09", "10.10", "07.11", "12.12"],
    "сб_осенний_2026_нечет": ["12.09", "17.10", "14.11", "19.12"]
    };
    function updateParityOptions() {
        const day = daySelect.value.toLowerCase();
        const semester = semesterSelect.value === "1" ? "осенний" : "весенний";
        const year = yearSelect.value;

        if (!day || !semester || !year) {
            paritySelect.innerHTML = ``;
            paritySelect.disabled = true;
            return;
        }

        paritySelect.innerHTML = `
            <option value="чет/неч">чет/неч</option>
            <option value="чет">чет</option>
            <option value="неч">неч</option>
        `;

        const keyBase = `${day}_${semester}_${year}`;
        const datesEven = dateOptionsByKey[`${keyBase}_чет`];
        const datesOdd = dateOptionsByKey[`${keyBase}_нечет`];

        if (Array.isArray(datesEven)) {
            const optEven = document.createElement("option");
            const valueEven = `чет: ${datesEven.join(", ")}`;
            optEven.value = valueEven;
            optEven.textContent = valueEven;
            paritySelect.appendChild(optEven);
        }

        if (Array.isArray(datesOdd)) {
            const optOdd = document.createElement("option");
            const valueOdd = `неч: ${datesOdd.join(", ")}`;
            optOdd.value = valueOdd;
            optOdd.textContent = valueOdd;
            paritySelect.appendChild(optOdd);
        }

        paritySelect.disabled = false;
    }

    // Изначально блокируем select
    paritySelect.disabled = true;

    // Навесим обработчики, чтобы обновлять options при изменениях
    daySelect.addEventListener("change", updateParityOptions);
    semesterSelect.addEventListener("change", updateParityOptions);
    yearSelect.addEventListener("change", updateParityOptions);
</script>

@*                                     В Ы В О Д    Р А С П И С А Н И Я *@

<h2 style="text-align:center; margin-top: 30px;">
    @if (filteredGroupNo.HasValue)
    {
        <text>Группа @filteredGroupNo</text>
    }
    else
    {
        <text>Все группы</text>
    }
</h2>

<table>
    <thead>
        <tr>
            <th>Группа</th>
            <th>День</th>
            <th>Время</th>
            <th>Дата</th>
            <th>Дисциплина</th>
            <th>Вид занятия</th>
            <th>Аудитория</th>
            <th>Здание</th>
            <th>Преподаватель</th>
            <th>Тип занятия</th>
            <th>Год расписания</th>
            <th>Семестр</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.GROUPNO</td>
                <td>@item.DEN</td>
                <td>@item.VREM</td>
                <td>@item.DATA</td>
                <td>@item.Discipline?.NAME</td>
                <td>@item.FORM_ZAN</td>
                <td>@item.AUDITORIYA</td>
                <td>@item.BUILDING_ID</td>
                <td>@item.PREPODAVATEL</td>
                <td>@(item.TIP == 1 ? "дневное" : (item.TIP == 2 ? "экзамен" : "заочное"))</td>
                <td>@item.YEARF</td>
                <td>@(item.SEMESTR == 1 ? "осенний" : "весенний")</td>
                <td>
                    <button type="button" class="openCreateModalBtn1" data-group="@item.LESSON_ID">Перенести</button>
                </td>
                <td>
                    <button type="button" class="btn btn-danger deleteLessonBtn" id="deleteLessonBtn" data-id="@item.LESSON_ID">Удалить</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.deleteLessonBtn').forEach(button => {
            button.addEventListener('click', async () => {
                if (!confirm("Вы уверены, что хотите удалить занятие?")) return;

                const lessonId = button.dataset.id;
                const row = button.closest('tr');

                const groupId = document.getElementById('groupSelect').value;
                const tip = document.getElementById('tipSelect').value;
                const semester = document.getElementById('semesterSelect').value;
                const year = document.getElementById('yearSelect').value;

                const params = new URLSearchParams({
                    id: lessonId,
                    groupId,
                    tip,
                    semester,
                    year
                });

                try {
                    const response = await fetch(`/SchedulerNPubl/DeleteAjax?${params.toString()}`, {
                        method: 'POST'
                    });

                    if (response.ok) {
                        row.remove(); // удаляем строку из таблицы
                    } else {
                        const err = await response.text();
                        alert("Ошибка при удалении: " + err);
                    }
                } catch (err) {
                    alert("Сетевая ошибка: " + err);
                }
            });
        });
    });
</script>

@*                                    П Е Р Е Н О С   О К Н О *@

<div class="modal" id="createModal1">
    <div class="modal-content">
        <div class="modal-header">
            Перенос занятия группе номер
            @if (filteredGroupNo.HasValue)
            {
                <text>@filteredGroupNo</text>
            }
        </div>
        <form id="transferForm1" asp-action="Create1" method="post">
            <input type="hidden" id="lessonIdHidden1" name="LESSON_ID" />
            <input type="hidden" id="hiddenGroupId1" name="GROUPID" />
            <input type="hidden" id="createGroupNo1" name="GROUPNO" />
            <input type="hidden" id="hiddenPrepod1" name="PREPODAVATEL" />
            <input type="hidden" id="hiddenTip1" name="TIP" />
            <input type="hidden" id="hiddenSemester1" name="SEMESTR" />
            <input type="hidden" id="hiddenYear1" name="YEARF" />
            <input type="hidden" id="createGroupNo1" name="GROUPNO" value="@ViewBag.FilteredGroupNo" />
            <div class="modal-row">
                <label style="width:200px" for="createDay1">День</label>
                <select id="createDay1" name="DEN" required>
                    <option value="">Выберите день</option>
                    <option value="пн">пн</option>
                    <option value="вт">вт</option>
                    <option value="ср">ср</option>
                    <option value="чт">чт</option>
                    <option value="пт">пт</option>
                    <option value="сб">сб</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="paritySelect1">Четность / Дата</label>
                <select id="paritySelect1" name="DATA" required>
                    <option value="">Выберите четность / дату</option>
                    <option value="чет/неч">чет/неч</option>
                    <option value="чет">чет</option>
                    <option value="неч">неч</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createTime1">Время</label>
                <span id="timeLabel1" class="label-display"></span>
                <select id="createTime1" name="VREM" required>
                    <option value="">Выберите время</option>
                    <option value="08:00">08:00</option>
                    <option value="09:40">09:40</option>
                    <option value="11:20">11:20</option>
                    <option value="13:30">13:30</option>
                    <option value="15:10">15:10</option>
                    <option value="16:50">16:50</option>
                    <option value="18:25">18:25</option>
                    <option value="20:00">20:00</option>
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createBuilding1">Здание</label>
                <select id="createBuilding1" name="ZDANIE" required>
                    <option value="">Выберите здание</option>
                    @foreach (var item in ViewBag.Buildings1 as List<SelectListItem>)
                    {
                        <option value="@item.Value">@item.Text</option>
                    }
                </select>
            </div>
            <div class="modal-row">
                <label style="width:200px" for="createAud1">Аудитория</label>
                <span id="audLabel1" class="label-display"></span>
                <select id="createAud1" name="AUDITORIYA" required>
                    <option value="">Выберите аудиторию</option>
                </select>
            </div>
            <div class="modal-footer">
                <button type="button" id="confirmCreateBtn1">Перенести</button>
                <button type="button" id="cancelCreateBtn1">Отмена</button>
            </div>
        </form>
    </div>
</div>

@*                                   Открытие закрытие *@

<script>
        const createModal1 = document.getElementById('createModal1');
        const cancelCreateBtn1 = document.getElementById('cancelCreateBtn1');
        const createForm1 = document.getElementById('transferForm1');

        // Открытие модального окна с загрузкой данных занятия
    document.querySelectorAll('.openCreateModalBtn1').forEach(btn => {
        btn.addEventListener('click', async function () {
            const lessonId = btn.dataset.group;
            const groupId = document.getElementById('groupSelect').value;
            const tip = document.getElementById('tipSelect').value;
            const semester = document.getElementById('semesterSelect').value;
            const year = document.getElementById('yearSelect').value;

            if (!groupId || !tip || !semester || !year) {
                alert("Пожалуйста, выберите все фильтры: группу, тип занятия, год и семестр перед переносом.");
                return;
            }


            try {
                const response = await fetch(`/SchedulerNPubl/GetLessonDetails?lessonId=${lessonId}`);
                if (!response.ok) {
                    throw new Error('Ошибка загрузки данных');
                }
                const lesson = await response.json();
                    console.log('lesson.groupNo =', lesson.groupNo);
    console.log('lesson.groupId =', lesson.groupId);
                if (!lesson) {
                    alert("Не удалось загрузить данные занятия");
                    return;
                }

                // Очищаем пробелы из данных
                const denTrim = lesson.den?.trim() || '';
                const vremTrim = lesson.vrem?.trim() || '';
                const dataTrim = lesson.data?.trim() || '';
                const zdanieTrim = lesson.zdanie?.trim() || '';
                const auditoriyaTrim = lesson.auditoriya?.trim() || '';
                const prepodTrim = lesson.prepodavatel?.trim() || '';
                const groupIdReal = lesson.groupId || ''; // id группы из lesson

                // Заполняем все скрытые поля
    document.getElementById('lessonIdHidden1').value = lessonId;
    document.getElementById('createGroupNo1').value = lesson.groupNo;          // GROUPNO ← номер группы
    document.getElementById('hiddenGroupId1').value = lesson.groupId;          // GROUPID ← id группы
    document.getElementById('hiddenPrepod1').value = prepodTrim;               // PREPODAVATEL
    document.getElementById('hiddenTip1').value = tip;
    document.getElementById('hiddenSemester1').value = semester;
    document.getElementById('hiddenYear1').value = year;                  // YEARF

                // Заполнение основных полей
    document.getElementById('createDay1').value = denTrim;

    // Время: не вставляем в select — только label
    document.getElementById('timeLabel1').textContent = vremTrim || "—";

    // Аудитория: не вставляем в select — только label
    document.getElementById('audLabel1').textContent = auditoriyaTrim || "—";

    setTimeout(updateFreeTimes1, 100);

    document.getElementById('createBuilding1').value = zdanieTrim;

    updateParityOptions1();
    document.getElementById('paritySelect1').value = dataTrim;

                // Управление доступностью поля четности
                const paritySelect = document.getElementById('paritySelect1');
                paritySelect.disabled = denTrim === '';

                // Открываем модальное окно
                createModal1.style.display = 'flex';

                // Загружаем аудитории, передавая выбранную аудиторию
                setTimeout(() => loadAuditories1(auditoriyaTrim), 100);

            } catch (error) {
                console.error('Ошибка загрузки данных:', error);
                alert("Ошибка загрузки данных занятия: " + error.message);
            }
        });
    });

        // Закрытие модального окна
        cancelCreateBtn1.addEventListener('click', () => {
            createModal1.style.display = 'none';
            createForm1.reset();
            // Сброс доступности поля четности при закрытии
            document.getElementById('paritySelect1').disabled = true;
        });

        window.addEventListener('click', (e) => {
            if (e.target === createModal1) {
                createModal1.style.display = 'none';
                createForm1.reset();
                document.getElementById('paritySelect1').disabled = true;
            }
        });

        // Обработчик изменения дня недели — разблокирует/блокирует поле четности и перезагружает аудитории
        document.getElementById('createDay1').addEventListener('change', function () {
            const paritySelect = document.getElementById('paritySelect1');
            if (this.value === '') {
                paritySelect.value = '';
                paritySelect.disabled = true;
            } else {
                paritySelect.disabled = false;
            }
            // При смене дня сбрасываем аудиторию
            resetAuditorySelect();
            loadAuditories1();
        });

        // Обработчики изменения времени, здания, четности — сброс аудитории и загрузка новых данных
        ['createTime1', 'createBuilding1', 'paritySelect1'].forEach(id => {
            document.getElementById(id).addEventListener('change', () => {
                resetAuditorySelect();
                loadAuditories1();
            });
        });

        // Функция сброса выбора аудитории на дефолтный вариант
        function resetAuditorySelect() {
            const audSelect = document.getElementById('createAud1');
            audSelect.innerHTML = '';
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Выберите аудиторию';
            audSelect.appendChild(defaultOption);
            audSelect.disabled = true;
        }

        // Функция загрузки аудиторий
            async function loadAuditories1(selectedAud = '') {
        const building = document.getElementById('createBuilding1').value.trim();
        const day = document.getElementById('createDay1').value.trim();
        const time = document.getElementById('createTime1').value.trim();
        const semester = document.getElementById('semesterSelect').value;
        const year = document.getElementById('yearSelect').value;
        const parity = document.getElementById('paritySelect1').value.trim();
        const audSelect = document.getElementById('createAud1');

        // Если чего-то критически не хватает — выходим и сбрасываем
        if (!building || !day || !time || !semester || !year || !parity) {
            resetAuditorySelect();
            return;
        }

        try {
            const response = await fetch(`/SchedulerNPubl/GetAuditoriesByBuilding1?` +
                `buildingName=${encodeURIComponent(building)}` +
                `&day=${encodeURIComponent(day)}` +
                `&time=${encodeURIComponent(time)}` +
                `&semester=${encodeURIComponent(semester)}` +
                `&year=${encodeURIComponent(year)}` +
                `&parity=${encodeURIComponent(parity)}`);

            if (!response.ok) {
                throw new Error('Ошибка сервера при загрузке аудиторий');
            }

            const data = await response.json();

            // Сбрасываем и наполняем
            audSelect.innerHTML = '';
            const defaultOption = document.createElement('option');
            defaultOption.value = '';
            defaultOption.textContent = 'Выберите аудиторию';
            audSelect.appendChild(defaultOption);

            let foundSelected = false;

            data.forEach(a => {
                const option = document.createElement('option');
                option.value = a.value;
                option.title = a.tooltip || "";
                option.textContent = a.text;

                if (a.busy) {
                    option.style.color = 'red';
                    option.disabled = true;
                }

                // Новый безопасный способ сравнить аудиторию
                if (
                    selectedAud &&
                    a.value.toLowerCase().trim() === selectedAud.toLowerCase().trim()
                ) {
                    option.selected = true;
                    foundSelected = true;
                }

                audSelect.appendChild(option);
            });

            audSelect.disabled = false;

            // Если не нашли среди загруженных — ставим default
            if (!foundSelected) {
                audSelect.value = '';
            }

        } catch (error) {
            console.error('Ошибка загрузки аудиторий:', error);
            alert("Ошибка загрузки списка аудиторий: " + error.message);
            resetAuditorySelect();
        }
    }

        // --- Новый код для dateOptionsByKey1 и обновления paritySelect1 ---

     let paritySelect2 = document.getElementById("paritySelect1");
     let daySelect1 = document.getElementById("createDay1");
     let semesterSelect2 = document.getElementById("semesterSelect1");
     let yearSelect2 = document.getElementById("yearSelect1");

        const dateOptionsByKey1 = {
            // весенний 2024
    "пн_весенний_2024_чет":   ["05.02", "04.03", "01.04", "06.05"],
    "пн_весенний_2024_нечет": ["12.02", "11.03", "08.04", "13.05"],

    "вт_весенний_2024_чет":   ["06.02", "05.03", "02.04", "07.05"],
    "вт_весенний_2024_нечет": ["13.02", "12.03", "09.04", "14.05"],

    "ср_весенний_2024_чет":   ["07.02", "06.03", "03.04", "08.05"],
    "ср_весенний_2024_нечет": ["14.02", "13.03", "10.04", "15.05"],

    "чт_весенний_2024_чет":   ["08.02", "07.03", "04.04", "09.05"],
    "чт_весенний_2024_нечет": ["15.02", "14.03", "11.04", "16.05"],

    "пт_весенний_2024_чет":   ["09.02", "08.03", "05.04", "10.05"],
    "пт_весенний_2024_нечет": ["16.02", "15.03", "12.04", "17.05"],

    "сб_весенний_2024_чет":   ["03.02", "02.03", "06.04", "04.05"],
    "сб_весенний_2024_нечет": ["10.02", "09.03", "13.04", "11.05"],

    // весенний 2025
    "пн_весенний_2025_чет":   ["03.02", "03.03", "07.04", "05.05"],
    "пн_весенний_2025_нечет": ["10.02", "10.03", "14.04", "12.05"],

    "вт_весенний_2025_чет":   ["04.02", "04.03", "08.04", "06.05"],
    "вт_весенний_2025_нечет": ["11.02", "11.03", "15.04", "13.05"],

    "ср_весенний_2025_чет":   ["05.02", "05.03", "09.04", "07.05"],
    "ср_весенний_2025_нечет": ["12.02", "12.03", "16.04", "14.05"],

    "чт_весенний_2025_чет":   ["06.02", "06.03", "10.04", "08.05"],
    "чт_весенний_2025_нечет": ["13.02", "13.03", "17.04", "15.05"],

    "пт_весенний_2025_чет":   ["07.02", "07.03", "11.04", "09.05"],
    "пт_весенний_2025_нечет": ["14.02", "14.03", "18.04", "16.05"],

    "сб_весенний_2025_чет":   ["08.02", "08.03", "12.04", "10.05"],
    "сб_весенний_2025_нечет": ["15.02", "15.03", "19.04", "17.05"],

    // весенний 2026
    "пн_весенний_2026_чет":   ["02.02", "02.03", "06.04", "04.05"],
    "пн_весенний_2026_нечет": ["09.02", "09.03", "13.04", "11.05"],

    "вт_весенний_2026_чет":   ["03.02", "03.03", "07.04", "05.05"],
    "вт_весенний_2026_нечет": ["10.02", "10.03", "14.04", "12.05"],

    "ср_весенний_2026_чет":   ["04.02", "04.03", "08.04", "06.05"],
    "ср_весенний_2026_нечет": ["11.02", "11.03", "15.04", "13.05"],

    "чт_весенний_2026_чет":   ["05.02", "05.03", "09.04", "07.05"],
    "чт_весенний_2026_нечет": ["12.02", "12.03", "16.04", "14.05"],

    "пт_весенний_2026_чет":   ["06.02", "06.03", "10.04", "08.05"],
    "пт_весенний_2026_нечет": ["13.02", "13.03", "17.04", "15.05"],

    "сб_весенний_2026_чет":   ["07.02", "07.03", "11.04", "09.05"],
    "сб_весенний_2026_нечет": ["14.02", "14.03", "18.04", "16.05"],

    // осенний 2024
    "пн_осенний_2024_чет":   ["02.09", "07.10", "04.11", "02.12"],
    "пн_осенний_2024_нечет": ["09.09", "14.10", "11.11", "09.12"],

    "вт_осенний_2024_чет":   ["03.09", "08.10", "05.11", "03.12"],
    "вт_осенний_2024_нечет": ["10.09", "15.10", "12.11", "10.12"],

    "ср_осенний_2024_чет":   ["04.09", "09.10", "06.11", "04.12"],
    "ср_осенний_2024_нечет": ["11.09", "16.10", "13.11", "11.12"],

    "чт_осенний_2024_чет":   ["05.09", "10.10", "07.11", "05.12"],
    "чт_осенний_2024_нечет": ["12.09", "17.10", "14.11", "12.12"],

    "пт_осенний_2024_чет":   ["06.09", "11.10", "08.11", "06.12"],
    "пт_осенний_2024_нечет": ["13.09", "18.10", "15.11", "13.12"],

    "сб_осенний_2024_чет":   ["07.09", "12.10", "09.11", "07.12"],
    "сб_осенний_2024_нечет": ["14.09", "19.10", "16.11", "14.12"],

    // осенний 2025
    "пн_осенний_2025_чет":   ["08.09", "06.10", "03.11", "01.12"],
    "пн_осенний_2025_нечет": ["01.09", "13.10", "10.11", "08.12"],

    "вт_осенний_2025_чет":   ["02.09", "07.10", "04.11", "02.12"],
    "вт_осенний_2025_нечет": ["09.09", "14.10", "11.11", "09.12"],

    "ср_осенний_2025_чет":   ["03.09", "08.10", "05.11", "03.12"],
    "ср_осенний_2025_нечет": ["10.09", "15.10", "12.11", "10.12"],

    "чт_осенний_2025_чет":   ["04.09", "09.10", "06.11", "04.12"],
    "чт_осенний_2025_нечет": ["11.09", "16.10", "13.11", "11.12"],

    "пт_осенний_2025_чет":   ["05.09", "10.10", "07.11", "05.12"],
    "пт_осенний_2025_нечет": ["12.09", "17.10", "14.11", "12.12"],

    "сб_осенний_2025_чет":   ["06.09", "11.10", "08.11", "06.12"],
    "сб_осенний_2025_нечет": ["13.09", "18.10", "15.11", "13.12"],

    // осенний 2026
    "пн_осенний_2026_чет":   ["07.09", "05.10", "02.11", "07.12"],
    "пн_осенний_2026_нечет": ["14.09", "12.10", "09.11", "14.12"],

    "вт_осенний_2026_чет":   ["08.09", "06.10", "03.11", "08.12"],
    "вт_осенний_2026_нечет": ["01.09", "13.10", "10.11", "15.12"],

    "ср_осенний_2026_чет":   ["02.09", "07.10", "04.11", "09.12"],
    "ср_осенний_2026_нечет": ["09.09", "14.10", "11.11", "16.12"],

    "чт_осенний_2026_чет":   ["03.09", "08.10", "05.11", "10.12"],
    "чт_осенний_2026_нечет": ["10.09", "15.10", "12.11", "17.12"],

    "пт_осенний_2026_чет":   ["04.09", "09.10", "06.11", "11.12"],
    "пт_осенний_2026_нечет": ["11.09", "16.10", "13.11", "18.12"],

    "сб_осенний_2026_чет":   ["05.09", "10.10", "07.11", "12.12"],
    "сб_осенний_2026_нечет": ["12.09", "17.10", "14.11", "19.12"]
    };
            function updateParityOptions1() {
                const day = document.getElementById('createDay1').value.toLowerCase();
                const semester = document.getElementById('semesterSelect').value === "1" ? "осенний" : "весенний";
                const year = document.getElementById('yearSelect').value;
                const paritySelect = document.getElementById('paritySelect1');

                // Сохраняем текущее выбранное значение
                const currentValue = paritySelect.value;

                paritySelect.innerHTML = '';

                if (!day || !semester || !year) {
                    paritySelect.disabled = true;
                    return;
                }

                const keyBase = `${day}_${semester}_${year}`;
                const keyEven = `${keyBase}_чет`;
                const keyOdd = `${keyBase}_нечет`;

                const datesEven = dateOptionsByKey1[keyEven];
                const datesOdd = dateOptionsByKey1[keyOdd];

                // Добавляем базовые варианты
                ["чет/неч", "чет", "неч"].forEach(value => {
                    const opt = document.createElement("option");
                    opt.value = value;
                    opt.textContent = value;
                    paritySelect.appendChild(opt);
                });

                // Добавляем варианты с датами
                if (datesEven) {
                    const evenDates = datesEven.join(", ");
                    const optEven = document.createElement("option");
                    optEven.value = `чет: ${evenDates}`;
                    optEven.textContent = `чет: ${evenDates}`;
                    paritySelect.appendChild(optEven);
                }

                if (datesOdd) {
                    const oddDates = datesOdd.join(", ");
                    const optOdd = document.createElement("option");
                    optOdd.value = `неч: ${oddDates}`;
                    optOdd.textContent = `неч: ${oddDates}`;
                    paritySelect.appendChild(optOdd);
                }

                // Восстанавливаем выбранное значение, если оно есть
                if (currentValue) {
                    paritySelect.value = currentValue;
                }

                paritySelect.disabled = false;
            }

        // Изначально блокируем select четности
        if (paritySelect2) paritySelect2.disabled = true;
            // Навешиваем обработчики для обновления четности по изменению дня, семестра, года
        if (daySelect1) daySelect1.addEventListener("change", updateParityOptions1);
        if (semesterSelect2) semesterSelect2.addEventListener("change", updateParityOptions1);
        if (yearSelect2) yearSelect2.addEventListener("change", updateParityOptions1);

            const confirmCreateBtn1 = document.getElementById('confirmCreateBtn1');

    confirmCreateBtn1.addEventListener('click', async () => {
        const parity = document.getElementById('paritySelect1').value.trim();
        const audSelect = document.getElementById('createAud1').value.trim();

        if (!parity) {
            alert("Пожалуйста, выберите четность занятия.");
            return;
        }

        if (!audSelect) {
            alert("Пожалуйста, выберите аудиторию.");
            return;
        }

        const formData = new FormData(createForm1);

        try {
            const response = await fetch('/SchedulerNPubl/Create1', {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const errorText = await response.text();
                alert("Ошибка: " + errorText);
                return;
            }

            // Закрываем модалку
            createModal1.style.display = 'none';
            createForm1.reset();

            // Берем фильтры, чтобы вернуть их в index
            const groupId = document.getElementById('groupSelect').value;
            const tip = document.getElementById('tipSelect').value;
            const semester = document.getElementById('semesterSelect').value;
            const year = document.getElementById('yearSelect').value;

            // Перенаправляем на Index с фильтрами
            const url = `/SchedulerNPubl/Index?groupId=${encodeURIComponent(groupId)}&tip=${encodeURIComponent(tip)}&semester=${encodeURIComponent(semester)}&year=${encodeURIComponent(year)}`;
            window.location.href = url;

        } catch (error) {
            console.error('Ошибка при переносе:', error);
            alert("Не удалось перенести занятие: " + error.message);
        }
    });
</script>
<script>
    async function updateFreeTimes1() {
        const day = document.getElementById("createDay1").value;
        const parity = document.getElementById("paritySelect1").value;
        const semester = document.getElementById("semesterSelect").value;
        const year = document.getElementById("yearSelect").value;
        const groupNo = document.getElementById("createGroupNo1").value;
        const timeSelect = document.getElementById("createTime1");

        if (!day || !parity || !semester || !year || !groupNo) return;

        try {
            const response = await fetch(`/SchedulerNPubl/GetFreeTimes?` +
                `day=${encodeURIComponent(day)}` +
                `&parity=${encodeURIComponent(parity)}` +
                `&semester=${semester}` +
                `&year=${year}` +
                `&groupNo=${groupNo}`);

            if (!response.ok) throw new Error("Ошибка загрузки времён");

            const freeTimes = await response.json();

            timeSelect.innerHTML = '<option value="">Выберите время</option>';
            freeTimes.forEach(time => {
                const option = document.createElement("option");
                option.value = time;
                option.textContent = time;
                timeSelect.appendChild(option);
            });

            timeSelect.disabled = freeTimes.length === 0;

        } catch (err) {
            console.error("Ошибка при загрузке свободного времени:", err);
        }
    }

    // Навешиваем обработчики при изменении фильтров
    ['createDay1', 'paritySelect1', 'semesterSelect', 'yearSelect'].forEach(id => {
        const el = document.getElementById(id);
        if (el) {
            el.addEventListener("change", updateFreeTimes1);
        }
    });
</script>
